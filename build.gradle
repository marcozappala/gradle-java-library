plugins {
    //The key difference between the standard Java plugin and the Java Library plugin is that the latter introduces the
    // concept of an API exposed to consumers. A library is a Java component meant to be consumed by other components.
    // Itâ€™s a very common use case in multi-project builds, but also as soon as you have external dependencies.
    //The plugin exposes two configurations that can be used to declare dependencies: 'api' and 'implementation', and
    // 'runtimeOnly'. (for test: 'testImplementation', 'testRuntimeOnly',)
    //The api configuration should be used to declare dependencies which are exported by the library API, whereas the
    // implementation configuration should be used to declare dependencies which are internal to the component.
    //Dependencies appearing in the api configurations will be transitively exposed to consumers of the library, and as
    // such will appear on the compile classpath of consumers. Dependencies found in the implementation configuration
    // will, on the other hand, not be exposed to consumers, and therefore not leak into the consumers' compile
    // classpath.
    id 'java-library'
}

group 'org.zap.training'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    api 'commons-httpclient:commons-httpclient:3.1'
    implementation 'org.apache.commons:commons-lang3:3.5'
}
